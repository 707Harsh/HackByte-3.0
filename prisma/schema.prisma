generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  FARMER
  CONTRACTOR
}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  clerkId             String             @unique
  name                String
  phone               String             @unique
  email               String?            @unique
  role                Role
  state               String
  city                String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  farmerProfile       FarmerProfile?
  contractorProfile   ContractorProfile?
  farmerChatRooms     ChatRoom[]         @relation("farmerRelation")
  contractorChatRooms ChatRoom[]         @relation("contractorRelation")
  sentMessages        Message[]          @relation("messageSender")
}

model FarmerProfile {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique @db.ObjectId
  produces Produce[]
}

model ContractorProfile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique @db.ObjectId
  companyName String?
  rating      Float?
  experience  Int?
}

model Produce {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  farmerProfile   FarmerProfile @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String        @db.ObjectId
  cropType        String
  quantity        Float
  pricePerUnit    Float
  suggestedPrice  Float?
  createdAt       DateTime      @default(now())
}

model ChatRoom {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  farmer       User      @relation(fields: [farmerId], references: [id], name: "farmerRelation")
  farmerId     String    @db.ObjectId
  contractor   User      @relation(fields: [contractorId], references: [id], name: "contractorRelation")
  contractorId String    @db.ObjectId
  createdAt    DateTime  @default(now())
  messages     Message[]
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String   @db.ObjectId
  sender     User     @relation(fields: [senderId], references: [id], name: "messageSender")
  senderId   String   @db.ObjectId
  createdAt  DateTime @default(now())
}

model CropSuggestion {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  cropType       String
  state          String
  city           String
  averagePrice   Float
  suggestedPrice Float
  lastUpdated    DateTime @default(now())
}
